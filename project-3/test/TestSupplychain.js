// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')
const truffleAssert = require('truffle-assertions')
const chaiAssert = require("chai").assert;

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei('1', 'ether')
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[9])

    // 1st Test
    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Mark an item as Harvested by calling function harvestItem()
        let result = await supplyChain.harvestItem(
            upc,
            originFarmerID,
            originFarmName,
            originFarmInformation,
            originFarmLatitude,
            originFarmLongitude,
            productNotes,
            {from: accounts[1]});


        // // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
        assert.equal(result.logs[0].event,'Harvested','Error: Invalid event emitted')
    })

    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {
        const supplyChain = await SupplyChain.deployed();
        const accountId = 1;
        const expectedState = 1;
        const expectedStateName = 'Processed';

        // Declare and Initialize a variable for event
        let result = await supplyChain.processItem(upc, {from: accounts[accountId]});

        // Grab the emitted event (expected to be Processed())
        let expectedEvent = result.logs[0].event;

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

         // Verify the result set
         assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
         assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
         assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
         assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
         assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
         assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
         assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
         assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
         assert.equal(resultBufferTwo[5], expectedState, `Error: Invalid item State`)
         assert.equal(expectedEvent,expectedStateName,'Error: Invalid event emitted')

    })

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {

        // Declare and Initialize a variables
        const supplyChain = await SupplyChain.deployed();
        const accountId = 1; // which actor are we simulating?
        const expectedState = 2; // which state are we expecting after this test executes
        const expectedStateName = 'Packed'; // what is the state name we are expecting after this test executes
        let result = await supplyChain.packItem(upc, {from: accounts[accountId]}); // make the call, and als making up for watch() no longer being available

         // Grab the emitted event (expected to be Processed())
         let expectedEvent = result.logs[0].event;

         // Retrieve the just now saved item from blockchain by calling function fetchItem()
         const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
         const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], expectedState, `Error: Invalid item State`)
        assert.equal(expectedEvent,expectedStateName,'Error: Invalid event emitted')

    })

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
        // Declare and Initialize a variables
        const supplyChain = await SupplyChain.deployed();
        const accountId = 1; // which actor are we simulating?
        const expectedPrice = productPrice; // price of the item at this state.
        const expectedState = 3; // which state are we expecting after this test executes
        const expectedStateName = 'ForSale'; // what is the state name we are expecting after this test executes
        let result = await supplyChain.sellItem(upc,expectedPrice, {from: accounts[accountId]}); // make the call, and als making up for watch() no longer being available

         // Grab the emitted event (expected to be Processed())
         let expectedEvent = result.logs[0].event;

         // Retrieve the just now saved item from blockchain by calling function fetchItem()
         const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
         const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
         console.log(`current product price: ${resultBufferTwo[4]}`);

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], expectedState, `Error: Invalid item State`)
        assert.equal(resultBufferTwo[4], expectedPrice, `Error: Invalid item price`)
        assert.equal(expectedEvent,expectedStateName,'Error: Invalid event emitted')



    })

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        // Declare and Initialize a variables

        const supplyChain = await SupplyChain.deployed();
        const accountID = 2; // which actor are we simulating?

        // snapshots of actors account balance
        let startFarmerBalance = await web3.eth.getBalance(accounts[accountID-1])
        let startDistributorBalance = await web3.eth.getBalance(accounts[accountID])

        // declare and iniatialize other variables
        const wholesalePrice = productPrice; // price of the item that the distributor buys at.
        const msgValue = productPrice; // value of the message you want to send TODO: write another test case that tests that change has beeen delivered correctly.
        const markupFactor = 4; // distributor's markup multiplier.  used to calculate manufacturer suggested retail price (msrp or msrPrice)
        const msrPrice = wholesalePrice * markupFactor; // manufacturer suggested retail price (the price that the retailer will sell at).
        const expectedState = 4; // which state are we expecting after this test executes
        const expectedStateName = 'Sold'; // what is the state name we are expecting after this test executes

        // make the call
        let result = await supplyChain.buyItem(upc, {from: accounts[accountID], value: msgValue}); // make the call, and als making up for watch() no longer being available

        // snapshot of post call balances
        let endFarmerBalance = await web3.eth.getBalance(accounts[accountID-1])
        let endDistributorBalance = await web3.eth.getBalance(accounts[accountID])

        // calculate deltas and convert back to ether
        let farmDelta = endFarmerBalance - startFarmerBalance;
        let distributorDelta = endDistributorBalance - startDistributorBalance

        /* TESTING STUFF
        let calculatedBalance = startDistributorBalance - result.receipt.cumulativeGasUsed - msgValue;

        console.log(`startDistributorBalance: ${startDistributorBalance}`);
        console.log(`Total Gas Used: ${result.receipt.cumulativeGasUsed}`);
        console.log(`Product Price: ${msgValue}`)
        console.log(`Calculated Balance: ${calculatedBalance}`);
        console.log(`Actual Balance: ${endDistributorBalance}`);
        console.log(`I am off by: ${endDistributorBalance - calculatedBalance}`)
        */

         // Grab the emitted event (expected to be Processed())
         let expectedEvent = result.logs[0].event;

         // Retrieve the just now saved item from blockchain by calling function fetchItem()
         const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
         const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], distributorID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], expectedState, `Error: Invalid item State`)
        assert.equal(resultBufferTwo[4], msrPrice, `Error: Invalid item price`)
        assert.equal(resultBufferTwo[6], distributorID, `Error: Invalid distributorID`)
        assert.equal(expectedEvent,expectedStateName,'Error: Invalid event emitted')
        assert.equal(farmDelta,wholesalePrice,'Error: Farmer got the wrong amont of Wei')


    })

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        // Declare and Initialize a variables
        const supplyChain = await SupplyChain.deployed();
        const accountID = 2; // which actor are we simulating?

        // declare and iniatialize other variables
        const expectedState = 5; // which state are we expecting after this test executes
        const expectedStateName = 'Shipped'; // what is the state name we are expecting after this test executes

        // make the call
        let result = await supplyChain.shipItem(upc, {from: accounts[accountID]}); // make the call, and als making up for watch() no longer being available



        // Grab the emitted event (expected to be Processed())
        let actualEventName = result.logs[0].event;

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)


        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], distributorID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], expectedState, `Error: Invalid item State`)
        assert.equal(resultBufferTwo[6], distributorID, `Error: Invalid distributorID`)
        assert.equal(actualEventName,expectedStateName,'Error: Invalid event emitted')

    })

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        // Declare and Initialize a variables
        const supplyChain = await SupplyChain.deployed();
        const accountID = 3; // which actor are we simulating?

        // declare and iniatialize other variables
        const expectedState = 6; // which state are we expecting after this test executes
        const expectedStateName = 'Received'; // what is the state name we are expecting after this test executes

        // make the call
        let result = await supplyChain.receiveItem(upc, {from: accounts[accountID]}); // make the call, and als making up for watch() no longer being available

        // Grab the emitted event (expected to be Processed())
        let actualEventName = result.logs[0].event;

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        console.log(`new product price: ${resultBufferTwo[4]}`);

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], distributorID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], expectedState, `Error: Invalid item State`)
        assert.equal(resultBufferTwo[6], distributorID, `Error: Invalid distributorID`)
        assert.equal(resultBufferTwo[7], retailerID, `Error: Invalid distributorID`)
        assert.equal(actualEventName,expectedStateName,'Error: Invalid event emitted')

    })

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        // Declare and Initialize a variables

        const supplyChain = await SupplyChain.deployed();
        const accountID = 4; // which actor are we simulating?

        let consumerBalance =await web3.eth.getBalance(accounts[accountID-1])
        console.log(`consumerBalance: ${consumerBalance}`);

        // snapshots of actors account balance
        let startDistributorBalance = await web3.eth.getBalance(accounts[accountID-2])
        let startRetailerBalance = await web3.eth.getBalance(accounts[accountID-1])

        // declare and iniatialize other variables
        const markupFactor = 4; // distributor's markup multiplier.  used to calculate manufacturer suggested retail price (msrp or msrPrice)
        const msrPrice = productPrice * markupFactor; // manufacturer suggested retail price (the price that the retailer will sell at).
        const msgValue = msrPrice; // value of the message you want to send TODO: write another test case that tests that change has beeen delivered correctly.
        const expectedState = 7; // which state are we expecting after this test executes
        const expectedStateName = 'Purchased'; // what is the state name we are expecting after this test executes
        const profitSplit = .5; // Expected % of msg value to be distributed to retailer & distributor
        const expectedRevenue = msgValue * profitSplit; // Expected increase to distributor & retailer's account value after sale has occured

        // make the call
        let result = await supplyChain.purchaseItem(upc, {from: accounts[accountID], value: msgValue}); // make the call, and als making up for watch() no longer being available


        // snapshot of post call balances
        let endDistributorBalance = await web3.eth.getBalance(accounts[accountID-2])
        let endRetailerBalance = await web3.eth.getBalance(accounts[accountID-1])

        // calculate deltas and convert back to ether
        let distributorDelta = endDistributorBalance - startDistributorBalance;
        let retailerDelta = endRetailerBalance - startRetailerBalance

        /* TESTING STUFF
        let calculatedBalance = startDistributorBalance - result.receipt.cumulativeGasUsed - msgValue;

        console.log(`startDistributorBalance: ${startDistributorBalance}`);
        console.log(`Total Gas Used: ${result.receipt.cumulativeGasUsed}`);
        console.log(`Product Price: ${msgValue}`)
        console.log(`Calculated Balance: ${calculatedBalance}`);
        console.log(`Actual Balance: ${endDistributorBalance}`);
        console.log(`I am off by: ${endDistributorBalance - calculatedBalance}`)
        */
            1134439500000000000
    //    100000000000000000000
    //      1000000000000000000
    //      4000000000000000000

        // Grab the emitted event (expected to be Processed())
        let expectedEvent = result.logs[0].event;

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], expectedState, `Error: Invalid item State`)
        assert.equal(resultBufferTwo[4], msrPrice, `Error: Invalid item price`)
        assert.equal(resultBufferTwo[6], distributorID, `Error: Invalid distributorID`)
        assert.equal(resultBufferTwo[7], retailerID, `Error: Invalid retailerID`)
        assert.equal(resultBufferTwo[8], consumerID, `Error: Invalid consumerID`)
        assert.equal(expectedEvent,expectedStateName,'Error: Invalid event emitted')
        assert.equal(distributorDelta,expectedRevenue,'Error: Distributor got the wrong amont of Wei')
        assert.equal(retailerDelta,expectedRevenue,'Error: Retailer got the wrong amont of Wei')

    // })

    // // 9th Test
    // it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
    //     const supplyChain = await SupplyChain.deployed()

    //     // Retrieve the just now saved item from blockchain by calling function fetchItem()


        // Verify the result set:

    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()


        // Verify the result set:

    })

});

